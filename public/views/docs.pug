section.secondary-hero
  section.navigation.fixed
    header
      .header-content
        .logo
          a(href='/')
            img(src='img/brandon-logo.png', alt='Brandon logo')
        .header-nav
          nav
            ul.primary-nav
              li
                a(href='/') Home
              li
                a(href='/about') About Me
              li
                a(href='/portfolio') Portfolio
              li
                a(href='/docs') Api Documents
            ul.visitor-actions
              li
                a.btn-white.btn-small(href='/contact') Contact Me
        .navicon
          a.nav-toggle(href='')
            span
            
section.docs-intro
  .container
    .row
      .col-md-12
        h3 Instructions for using the built-in REST API
    .row
      .col-md-6.col-sm-12.col-xs-12.leftcol
        p.
          The API is simple to use, handles GET, POST, PUT, and DELETE requests, and communicates to a MongoDB database hosted by <a href='https://www.mlab.com'>mLab</a>. By using the API, users can query and modify a collection of sports teams. For now, users must use an application or browser extension to send certain HTTP requests to the API. I recommend Google Chrome's Postman extension. However, I'm working on a GUI interface to handle those requests. When it is completed, I will add it to the application.
      .col-md-6.col-sm-12.col-xs-12.rightcol
        img(src='img/model.jpg')
        
section.testing
  .container
    .row
      .col-xs-12
        h3 Testing
      .col-xs-12
        p.
          By setting <code>NODE_ENV='test'</code> and starting the server, the application will attempt to connect to a local instance of MongoDB. This is used for running the Mocha tests contained in the test/test.js file which test all operations of the API. By starting the server with <code>NODE_ENV='global'</code>, or without the NODE_ENV variable set, the application will connect to the MongoDB database hosted by <a href='https://www.mlab.com'>mLab</a> for this application. This functionality is accomplished by the config/index.js file.
          
section.requests
  .container
    .row
      .col-md-1.text-right
        i.glyphicon.glyphicon-cog
      .col-md-5
        h4 GET [url]/teams
        p Returns an array of all objects in the collection
        p
          |API Call: [url]/teams <br/>
          |Response: <code>[{ "_id":012345,"name":"Yankees","City":"New York","League":"MLB" }]</code>
      .col-md-1.text-right
        i.glyphicon.glyphicon-cog
      .col-md-5
        h4 GET [url]/teams/:team_id
        p Returns an object representing a unique team
        p
          |API Call: [url]/teams/:team_id <br/>
          |Response: <code>{ "_id":012345,"name":"Yankees","City":"New York","League":"MLB" }</code>
    .row
      .col-md-1.text-right
        i.glyphicon.glyphicon-cog
      .col-md-5
        h4 POST [url]/teams
        p Adds a team to the database
        p
          |API Call: [url]/teams <br/>
          |Response: <code>{ "message":"Team created!",{ "_id":012345,"name":"Yankees","City":"New York","League":"MLB" }}</code>
      .col-md-1.text-right
        i.glyphicon.glyphicon-cog
      .col-md-5
        h4 PUT [url]/teams/:team_id
        p Updates the information of an existing team
        p
          |API Call: [url]/teams/:team_id <br/>
          |Response: <code>{ "message":"Team updated!",{ "_id":012345,"name":"Yankees","City":"New York","League":"MLB" }}</code>
    .row
      .col-md-1.text-right
        i.glyphicon.glyphicon-cog
      .col-xs-11
        h4 DELETE [url]/teams/:team_id
        p Deletes an existing team from the database
        p
          |API Call: [url]/teams/:team_id <br/>
          |Response: <code>{ "message":"Successfully deleted" }</code>